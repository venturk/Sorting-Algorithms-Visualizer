{"version":3,"sources":["sortingAlgorithms/MergeSort.jsx","sortingAlgorithms/BubbleSort.jsx","sortingAlgorithms/HeapSort.jsx","sortingAlgorithms/selectionSort.jsx","sortingVisualizer/SortingAnimationFromSequence.jsx","sortingVisualizer/SortingVisualizer.jsx","App.js","serviceWorker.js","index.js"],"names":["mergeSortingSequence","arr","seqArr","auxArr","slice","mergeSortHelper","startIdx","endIdx","midIdx","Math","floor","leftIdx","rightIdx","auxIdx","push","merging","length","bubbleSortingSequence","sequenceArr","j","swapped","i","temp","heapSortingSequence","size","heapify","idx","largest","left","right","selectionSortingSequence","current_min_idx","SortingAnimationFromSequence","sortingSequence","sortingSpeedMs","this","timing","arrayBars","document","getElementsByClassName","barOneIdx","barTwoIdx","barOneHeight","barTwoHeight","barOne","style","barTwo","undefined","setTimeout","backgroundColor","height","SortingVisualizer","properties","isSorting","state","array","initArr","randomNumberInRange","setState","min","max","random","animation_speed","sortingSequenceFunc","sorting_time","className","href","onClick","sortFunction","map","value","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.7f57d03c.chunk.js","sourcesContent":["export default function mergeSortingSequence(arr) {\r\n    const seqArr = []; // Init sequence array\r\n    const auxArr = arr.slice(); // Auxiliary array\r\n\r\n    mergeSortHelper(arr, 0, arr.length - 1, auxArr, seqArr);\r\n\r\n    return seqArr;\r\n}\r\n\r\nfunction mergeSortHelper(arr, startIdx, endIdx, auxArr, seqArr) {\r\n    if (startIdx === endIdx) {\r\n        return;\r\n    }\r\n\r\n    const midIdx = Math.floor((startIdx + endIdx) / 2); // Middle index\r\n\r\n    mergeSortHelper(auxArr, startIdx, midIdx, arr, seqArr); // First half\r\n    mergeSortHelper(auxArr, midIdx + 1, endIdx, arr, seqArr); // Second half\r\n\r\n    merging(arr, startIdx, midIdx, endIdx, auxArr, seqArr);  // Actual merging\r\n}\r\n\r\nfunction merging(arr, startIdx, midIdx, endIdx, auxArr, seqArr) {\r\n    let leftIdx = startIdx; // Left sub array index\r\n    let rightIdx = midIdx + 1; // Right sub array index\r\n    let auxIdx = startIdx; // auxiliary index\r\n\r\n    while (leftIdx <= midIdx && rightIdx <= endIdx) {\r\n        // Push index of the compared elements\r\n        seqArr.push([leftIdx, rightIdx]);\r\n\r\n        // Merge\r\n        if (auxArr[leftIdx] <= auxArr[rightIdx]) {\r\n            seqArr.push([auxIdx, auxArr[leftIdx], true]);\r\n            arr[auxIdx++] = auxArr[leftIdx++];\r\n        } else {\r\n            seqArr.push([auxIdx, auxArr[rightIdx], true]);\r\n            arr[auxIdx++] = auxArr[rightIdx++];\r\n        }\r\n    }\r\n\r\n    while (leftIdx <= midIdx) { // Remaining elements of left sub array\r\n        seqArr.push([leftIdx, leftIdx]);\r\n        seqArr.push([auxIdx, auxArr[leftIdx], true]);\r\n\r\n        arr[auxIdx++] = auxArr[leftIdx++];\r\n    }\r\n    \r\n    while (rightIdx <= endIdx) { // Remaining elements of right sub array\r\n        seqArr.push([rightIdx, rightIdx]);\r\n        seqArr.push([auxIdx, auxArr[rightIdx], true]);\r\n\r\n        arr[auxIdx++] = auxArr[rightIdx++];\r\n    }\r\n\r\n    return;\r\n}","export default function bubbleSortingSequence(arr) {\r\n    const sequenceArr = []; // Init sequence array\r\n\r\n    for (let j = 0; j < arr.length - 1; ++j) {\r\n        let swapped = false;\r\n\r\n        for (let i = 0; i < arr.length - 1 - j; ++i) {\r\n            sequenceArr.push([i, i + 1]); // Push index of the compared elements\r\n\r\n            if (arr[i] > arr[i + 1]) { // If current element is smaller than the next element\r\n                sequenceArr.push([i, i + 1, arr[i + 1], arr[i]]); // Push index and value of swapped elements\r\n                \r\n                let temp = arr[i]; // Swap\r\n                arr[i] = arr[i + 1];\r\n                arr[i + 1] = temp;\r\n\r\n                swapped = true;\r\n            }\r\n        }\r\n\r\n        if(swapped === false) { // Array is sorted\r\n            break;\r\n        }\r\n    }\r\n\r\n    return sequenceArr;\r\n}","export default function heapSortingSequence(arr) {\r\n    const seqArr = []; // Init sequence array\r\n    let size = arr.length;\r\n\r\n    // Build heap from array \r\n    for (let i = Math.floor(size / 2) - 1; i >= 0; --i) {\r\n        heapify(arr, seqArr, size, i);\r\n    }\r\n\r\n    // One by one extract an element from heap\r\n    for (let i = size - 1; i > 0; --i) {\r\n        // Push index of the compared elements\r\n        seqArr.push([0, i, arr[i], arr[0]]);\r\n\r\n        // Swaping\r\n        let temp = arr[0];\r\n        arr[0] = arr[i];\r\n        arr[i] = temp;\r\n\r\n        // Heapify on reduced heap \r\n        heapify(arr, seqArr, i, 0);\r\n    }\r\n\r\n    return seqArr;\r\n}\r\n\r\nfunction heapify(arr, seqArr, size, idx) {\r\n    let largest = idx; // Initialize largest element as root\r\n    let left = 2 * idx + 1; // Left child node\r\n    let right = 2 * idx + 2; // Right child node\r\n\r\n    if (left < size) {\r\n        // Push index of the compared elements\r\n        seqArr.push([left, largest]);\r\n\r\n        // Update root\r\n        if (arr[left] > arr[largest]) {\r\n            largest = left;\r\n        }\r\n    }\r\n\r\n    if (right < size) {\r\n        // Push index of the compared elements\r\n        seqArr.push([right, largest]);\r\n\r\n        // Update root\r\n        if (arr[right] > arr[largest]) {\r\n            largest = right;\r\n        }\r\n    }\r\n\r\n    // If root isn't the largest element\r\n    if (largest !== idx) {\r\n        // Push index and value of swapped elements\r\n        seqArr.push([idx, largest, arr[largest], arr[idx]]);\r\n\r\n        // Swaping\r\n        let temp = arr[idx];\r\n        arr[idx] = arr[largest];\r\n        arr[largest] = temp;\r\n\r\n        // Recursively heapify the affected sub-tree \r\n        heapify(arr, seqArr, size, largest);\r\n    }\r\n}","export default function selectionSortingSequence(arr) {\r\n    const sequenceArr = []; // Init sequence array\r\n    let current_min_idx;\r\n    \r\n    for (let i = 0; i < arr.length; ++i)\r\n    {\r\n        /* set minimum index to current index */\r\n        current_min_idx = i;\r\n\r\n        for (let j = i + 1; j < arr.length; ++j)\r\n        {\r\n            /* Push index of the compared elements */\r\n            sequenceArr.push([current_min_idx, j]);\r\n\r\n            /* If current minimum is bigger than the current element */\r\n            if (arr[current_min_idx] > arr[j])\r\n            {\r\n                /* Push index and value of swapped elements */\r\n                sequenceArr.push([current_min_idx, j, arr[j], arr[current_min_idx]]);\r\n                \r\n                /* Swap */\r\n                let temp = arr[current_min_idx];\r\n                arr[current_min_idx] = arr[j];\r\n                arr[j] = temp;\r\n            }\r\n        }\r\n    }\r\n\r\n    return sequenceArr;\r\n}","const PRIMARY_COLOR = '#73f7dd';\r\nconst COMPARISON_COLOR = \"#e43f5a\";\r\nconst FINAL_COLOR = \"#e43f5a\";\r\nconst ORIGINAL_COLOR = \"#1f4068\"\r\n\r\nexport default class SortingAnimationFromSequence {\r\n    constructor(sortingSequence, sortingSpeedMs) {\r\n        this.timing = 0;\r\n\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n\r\n        /* for each soting sequence */\r\n        for (let i = 0; i < sortingSequence.length; i++)\r\n        {\r\n            const [barOneIdx, barTwoIdx, barOneHeight, barTwoHeight] = sortingSequence[i];\r\n            const barOne = arrayBars[barOneIdx].style;\r\n            const barTwo = barOneHeight === undefined ? arrayBars[barTwoIdx].style : undefined;\r\n\r\n            /* current sequence is a comparison sequence */\r\n            if (undefined === barOneHeight)\r\n            {\r\n                /* Comparison animation (the compared bars are colored) */\r\n                setTimeout(() =>\r\n                {\r\n                    barOne.backgroundColor = COMPARISON_COLOR;\r\n                    barTwo.backgroundColor = COMPARISON_COLOR;\r\n                }, sortingSpeedMs * this.timing++);\r\n\r\n                /* Return to primary color (comparison is finished) */\r\n                setTimeout(() =>\r\n                {\r\n                    barOne.backgroundColor = PRIMARY_COLOR;\r\n                    barTwo.backgroundColor = PRIMARY_COLOR;\r\n                }, sortingSpeedMs * this.timing++);\r\n            }\r\n            else    /* bar(s) value should be updated */\r\n            {\r\n                setTimeout(() =>\r\n                {\r\n                    if (true === barOneHeight)\r\n                    {\r\n                        /* Update bar's new height */\r\n                        barOne.height = `${barTwoIdx}px`;\r\n                    }\r\n                    else\r\n                    {\r\n                        /* Update bar's new height */\r\n                        barOne.height = `${barOneHeight}px`;\r\n                        arrayBars[barTwoIdx].style.height = `${barTwoHeight}px`;\r\n                    }\r\n                }, sortingSpeedMs * this.timing++);\r\n            }\r\n        }\r\n\r\n        /* color all bars in a FINAL COLOR when sorting is done */\r\n        setTimeout(() =>\r\n        {\r\n            /* for each bar in the array */\r\n            for (let i = 0; i < arrayBars.length; ++i)\r\n            {\r\n                /* color all bars */\r\n                arrayBars[i].style.backgroundColor = FINAL_COLOR;\r\n            }\r\n        }, sortingSpeedMs * this.timing++);\r\n\r\n        /* increase delay */\r\n        this.timing += 250;\r\n\r\n        /* return to riginal color */\r\n        setTimeout(() =>\r\n        {\r\n            /* for each bar in the array */\r\n            for (let i = 0; i < arrayBars.length; ++i)\r\n            {\r\n                /* color all bars */\r\n                arrayBars[i].style.backgroundColor = ORIGINAL_COLOR;\r\n            }\r\n        }, sortingSpeedMs * this.timing++);\r\n\r\n        return this.timing;\r\n    }\r\n}","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport mergeSortingSequence from '../sortingAlgorithms/MergeSort.jsx';\r\nimport bubbleSortingSequence from '../sortingAlgorithms/BubbleSort.jsx';\r\nimport heapSortingSequence from '../sortingAlgorithms/HeapSort.jsx';\r\nimport selectionSortingSequence from '../sortingAlgorithms/selectionSort.jsx';\r\nimport SortingAnimationFromSequence from './SortingAnimationFromSequence.jsx';\r\nimport '../toolbar/Toolbar.css';\r\n\r\nconst NUM_OF_ELEMENTS = 150;\r\n\r\nexport default class SortingVisualizer extends React.Component\r\n{\r\n    constructor(properties)\r\n    {\r\n        super(properties);\r\n\r\n        this.isSorting = false;\r\n\r\n        this.state =\r\n        {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount()\r\n    {\r\n        /* initialize a random array */\r\n        this.initArr();\r\n    }\r\n\r\n    initArr()\r\n    {\r\n        /* if there is no active sorting sequence */\r\n        if (false === this.isSorting)\r\n        {\r\n            const array = [];\r\n            \r\n            /* for each element in the array */\r\n            for (let i = 0; i < NUM_OF_ELEMENTS; ++i)\r\n            {\r\n                /* set a random height (value) */\r\n                array.push(this.randomNumberInRange(50, 750));\r\n            }\r\n\r\n            /* update array */\r\n            this.setState({ array });\r\n        }\r\n\r\n    }\r\n\r\n    randomNumberInRange(min, max)\r\n    {\r\n        return Math.floor(Math.random() * (max - min + 1)) + min;\r\n    }\r\n\r\n    sortFunction(animation_speed, sortingSequenceFunc)\r\n    {\r\n        /* if there is no sorting at the moment */\r\n        if (false === this.isSorting)\r\n        {\r\n            /* set sorting flag */\r\n            this.isSorting = true;\r\n\r\n            /* get sorting sequence animation */\r\n            const sortingSequence = sortingSequenceFunc(this.state.array);\r\n\r\n            /*\r\n                run animation of sorting sequence\r\n                and set the sorting duration\r\n            */\r\n            let sorting_time = new SortingAnimationFromSequence(sortingSequence,\r\n                                                    animation_speed);\r\n            \r\n            /*\r\n                set sorting flag to false\r\n                only after sorting sequence is over\r\n            */\r\n            setTimeout(() =>\r\n            {\r\n                this.isSorting = false;\r\n            }, animation_speed * sorting_time.timing);\r\n        }\r\n    }\r\n\r\n    render()\r\n    {\r\n        const { array } = this.state;\r\n\r\n        return (\r\n            <div className=\"array-container\">\r\n                <haeader className=\"toolbar\">\r\n                    <nav className=\"toolbar__navigation\">\r\n                        <div></div>\r\n                        <div className=\"toolbar__logo\">\r\n                            Sorting Algorithms Visualizer\r\n                        </div>\r\n\r\n                        <div className=\"spacer\"></div>\r\n\r\n                        <div className=\"toolbar_navigation-items\">\r\n                            <ul>\r\n                                <li><a href=\"javascript:void(0);\" onClick={() => this.initArr()}>Randomize array</a></li>\r\n                                <li><a href=\"javascript:void(0);\" onClick={() => this.sortFunction(5, mergeSortingSequence)}>Merge Sort</a></li>\r\n                                <li><a href=\"javascript:void(0);\" onClick={() => this.sortFunction(1, bubbleSortingSequence)}>Bubble Sort</a></li>\r\n                                <li><a href=\"javascript:void(0);\" onClick={() => this.sortFunction(5, heapSortingSequence)}>Heap Sort</a></li>\r\n                                <li><a href=\"javascript:void(0);\" onClick={() => this.sortFunction(1, selectionSortingSequence)}>Selection Sort</a></li>\r\n                            </ul>\r\n                        </div>\r\n                    </nav>\r\n                </haeader>\r\n\r\n                {\r\n                    array.map((value, idx) =>\r\n                    (\r\n                        <div className=\"array-bar\" key={idx}\r\n                                            style={{ height: `${value}px` }}>\r\n                            {'.'}\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './sortingVisualizer/SortingVisualizer.jsx'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}