{"version":3,"sources":["sortingAlgorithms/MergeSort.jsx","sortingAlgorithms/HeapSort.jsx","sortingVisualizer/SortingAnimationFromSequence.jsx","sortingVisualizer/SortingVisualizer.jsx","sortingAlgorithms/BubbleSort.jsx","App.js","serviceWorker.js","index.js"],"names":["mergeSortingSequence","arr","seqArr","auxArr","slice","mergeSortHelper","startIdx","endIdx","midIdx","Math","floor","leftIdx","rightIdx","auxIdx","push","merging","length","heapify","size","idx","largest","left","right","temp","SortingAnimationFromSequence","sortingSequence","sortingSpeedMs","this","timing","arrayBars","document","getElementsByClassName","i","barOneIdx","barTwoIdx","barOneHeight","barTwoHeight","barOne","style","barTwo","undefined","setTimeout","backgroundColor","height","SortingVisualizer","properties","isSorting","state","array","initArr","randomNumberInRange","setState","minimum","maximum","random","ms","s","sequenceArr","j","swapped","bubbleSortingSequence","heapSortingSequence","className","href","onClick","mergeSort","bubbleSort","heapSort","map","value","key","React","Component","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kWAAe,SAASA,EAAqBC,GACzC,IAAMC,EAAS,GACTC,EAASF,EAAIG,QAInB,OAGJ,SAASC,EAAgBJ,EAAKK,EAAUC,EAAQJ,EAAQD,GACpD,GAAII,IAAaC,EACb,OAGJ,IAAMC,EAASC,KAAKC,OAAOJ,EAAWC,GAAU,GAEhDF,EAAgBF,EAAQG,EAAUE,EAAQP,EAAKC,GAC/CG,EAAgBF,EAAQK,EAAS,EAAGD,EAAQN,EAAKC,GAKrD,SAAiBD,EAAKK,EAAUE,EAAQD,EAAQJ,EAAQD,GACpD,IAAIS,EAAUL,EACVM,EAAWJ,EAAS,EACpBK,EAASP,EAEb,KAAOK,GAAWH,GAAUI,GAAYL,GAEpCL,EAAOY,KAAK,CAACH,EAASC,IAGlBT,EAAOQ,IAAYR,EAAOS,IAC1BV,EAAOY,KAAK,CAACD,EAAQV,EAAOQ,IAAU,IACtCV,EAAIY,KAAYV,EAAOQ,OAEvBT,EAAOY,KAAK,CAACD,EAAQV,EAAOS,IAAW,IACvCX,EAAIY,KAAYV,EAAOS,MAI/B,KAAOD,GAAWH,GACdN,EAAOY,KAAK,CAACH,EAASA,IACtBT,EAAOY,KAAK,CAACD,EAAQV,EAAOQ,IAAU,IAEtCV,EAAIY,KAAYV,EAAOQ,KAG3B,KAAOC,GAAYL,GACfL,EAAOY,KAAK,CAACF,EAAUA,IACvBV,EAAOY,KAAK,CAACD,EAAQV,EAAOS,IAAW,IAEvCX,EAAIY,KAAYV,EAAOS,KAjC3BG,CAAQd,EAAKK,EAAUE,EAAQD,EAAQJ,EAAQD,GAf/CG,CAAgBJ,EAAK,EAAGA,EAAIe,OAAS,EAAGb,EAAQD,GAEzCA,ECoBX,SAASe,EAAQhB,EAAKC,EAAQgB,EAAMC,GAChC,IAAIC,EAAUD,EACVE,EAAO,EAAIF,EAAM,EACjBG,EAAQ,EAAIH,EAAM,EAuBtB,GArBIE,EAAOH,IAEPhB,EAAOY,KAAK,CAACO,EAAMD,IAGfnB,EAAIoB,GAAQpB,EAAImB,KAChBA,EAAUC,IAIdC,EAAQJ,IAERhB,EAAOY,KAAK,CAACQ,EAAOF,IAGhBnB,EAAIqB,GAASrB,EAAImB,KACjBA,EAAUE,IAKdF,IAAYD,EAAK,CAEjBjB,EAAOY,KAAK,CAACK,EAAKC,EAASnB,EAAImB,GAAUnB,EAAIkB,KAG7C,IAAII,EAAOtB,EAAIkB,GACflB,EAAIkB,GAAOlB,EAAImB,GACfnB,EAAImB,GAAWG,EAGfN,EAAQhB,EAAKC,EAAQgB,EAAME,I,WCzDdI,EACjB,WAAYC,EAAiBC,GAAiB,IAAD,2BACzCC,KAAKC,OAAS,EAGd,IADA,IAAMC,EAAYC,SAASC,uBAAuB,aAHT,WAIhCC,GAJgC,kBAKsBP,EAAgBO,GALtC,GAK9BC,EAL8B,KAKnBC,EALmB,KAKRC,EALQ,KAKMC,EALN,KAM/BC,EAASR,EAAUI,GAAWK,MAC9BC,OAA0BC,IAAjBL,EAA6BN,EAAUK,GAAWI,WAAQE,OAEpDA,IAAjBL,GACAM,YAAW,WACPJ,EAAOK,gBAhBF,UAiBLH,EAAOG,gBAjBF,YAkBNhB,EAAiB,EAAKE,UACzBa,YAAW,WACPJ,EAAOK,gBArBL,UAsBFH,EAAOG,gBAtBL,YAuBHhB,EAAiB,EAAKE,WAGzBa,YAAW,YACc,IAAjBN,EACAE,EAAOM,OAAP,UAAmBT,EAAnB,OAGAG,EAAOM,OAAP,UAAmBR,EAAnB,MACAN,EAAUK,GAAWI,MAAMK,OAA3B,UAAuCP,EAAvC,SAELV,EAAiB,EAAKE,WAxBxBI,EAAI,EAAGA,EAAIP,EAAgBT,OAAQgB,IAAM,EAAzCA,GAkCT,OANAS,YAAW,WACP,IAAK,IAAIT,EAAI,EAAGA,EAAIH,EAAUb,SAAUgB,EACpCH,EAAUG,GAAGM,MAAMI,gBAtCf,YAwCThB,EAAiBC,KAAKC,UAElBD,KAAKC,QClCCgB,G,wDACjB,WAAYC,GAAa,IAAD,8BACpB,cAAMA,IAEDC,WAAY,EAEjB,EAAKC,MAAQ,CACTC,MAAO,IANS,E,gEAWpBrB,KAAKsB,Y,gCAIL,IAAuB,IAAnBtB,KAAKmB,UAAqB,CAG1B,IAFA,IAAME,EAAQ,GAELhB,EAAI,EAAGA,EArBJ,MAqB2BA,EACnCgB,EAAMlC,KAAKa,KAAKuB,oBAAoB,GAAI,MAG5CvB,KAAKwB,SAAS,CAAEH,a,0CAKJI,EAASC,GACzB,OAAO5C,KAAKC,MAAMD,KAAK6C,UAAYD,EAAUD,EAAU,IAAMA,I,gCAGvDG,GAAK,IAAD,OACV,IAAuB,IAAnB5B,KAAKmB,UAAqB,CAC1BnB,KAAKmB,WAAY,EAEjB,IAAMrB,EAAkBzB,EAAqB2B,KAAKoB,MAAMC,OACpDQ,EAAI,IAAIhC,EAA6BC,EAAiB8B,GAE1Dd,YAAW,WACP,EAAKK,WAAY,IAClBS,EAAKC,EAAE5B,W,iCAIP2B,GAAK,IAAD,OACX,IAAuB,IAAnB5B,KAAKmB,UAAqB,CAC1BnB,KAAKmB,WAAY,EAEjB,IAAMrB,EC3DH,SAA+BxB,GAG1C,IAFA,IAAMwD,EAAc,GAEXC,EAAI,EAAGA,EAAIzD,EAAIe,OAAS,IAAK0C,EAAG,CAGrC,IAFA,IAAIC,GAAU,EAEL3B,EAAI,EAAGA,EAAI/B,EAAIe,OAAS,EAAI0C,IAAK1B,EAGtC,GAFAyB,EAAY3C,KAAK,CAACkB,EAAGA,EAAI,IAErB/B,EAAI+B,GAAK/B,EAAI+B,EAAI,GAAI,CACrByB,EAAY3C,KAAK,CAACkB,EAAGA,EAAI,EAAG/B,EAAI+B,EAAI,GAAI/B,EAAI+B,KAE5C,IAAIT,EAAOtB,EAAI+B,GACf/B,EAAI+B,GAAK/B,EAAI+B,EAAI,GACjB/B,EAAI+B,EAAI,GAAKT,EAEboC,GAAU,EAIlB,IAAe,IAAZA,EACC,MAIR,OAAOF,EDkCyBG,CAAsBjC,KAAKoB,MAAMC,OACrDQ,EAAI,IAAIhC,EAA6BC,EAAiB8B,GAE1Dd,YAAW,WACP,EAAKK,WAAY,IAClBS,EAAKC,EAAE5B,W,+BAIT2B,GAAK,IAAD,OACT,IAAuB,IAAnB5B,KAAKmB,UAAqB,CAC1BnB,KAAKmB,WAAY,EAEjB,IAAMrB,EFxEH,SAA6BxB,GAKxC,IAJA,IAAMC,EAAS,GACXgB,EAAOjB,EAAIe,OAGNgB,EAAIvB,KAAKC,MAAMQ,EAAO,GAAK,EAAGc,GAAK,IAAKA,EAC7Cf,EAAQhB,EAAKC,EAAQgB,EAAMc,GAI/B,IAAK,IAAIA,EAAId,EAAO,EAAGc,EAAI,IAAKA,EAAG,CAE/B9B,EAAOY,KAAK,CAAC,EAAGkB,EAAG/B,EAAI+B,GAAI/B,EAAI,KAG/B,IAAIsB,EAAOtB,EAAI,GACfA,EAAI,GAAKA,EAAI+B,GACb/B,EAAI+B,GAAKT,EAGTN,EAAQhB,EAAKC,EAAQ8B,EAAG,GAG5B,OAAO9B,EEiDyB2D,CAAoBlC,KAAKoB,MAAMC,OACnDQ,EAAI,IAAIhC,EAA6BC,EAAiB8B,GAE1Dd,YAAW,WACP,EAAKK,WAAY,IAClBS,EAAKC,EAAE5B,W,+BAIR,IAAD,OACGoB,EAAUrB,KAAKoB,MAAfC,MAER,OACI,yBAAKc,UAAU,mBACX,6BAASA,UAAU,WACf,yBAAKA,UAAU,uBACX,8BACA,yBAAKA,UAAU,iBAAf,iCAIA,yBAAKA,UAAU,WAEf,yBAAKA,UAAU,4BACX,4BACI,4BAAI,uBAAGC,KAAK,sBAAsBC,QAAS,kBAAM,EAAKf,YAAlD,oBACJ,4BAAI,uBAAGc,KAAK,sBAAsBC,QAAS,kBAAM,EAAKC,UAAU,KAA5D,eACJ,4BAAI,uBAAGF,KAAK,sBAAsBC,QAAS,kBAAM,EAAKE,WAAW,KAA7D,gBACJ,4BAAI,uBAAGH,KAAK,sBAAsBC,QAAS,kBAAM,EAAKG,SAAS,KAA3D,kBAOhBnB,EAAMoB,KAAI,SAACC,EAAOlD,GAAR,OACN,yBAAK2C,UAAU,YAAYQ,IAAKnD,EAAKmB,MAAO,CAAEK,OAAO,GAAD,OAAK0B,EAAL,QAC/C,a,GAnGkBE,IAAMC,YEEtCC,MARf,WACE,OACE,yBAAKX,UAAU,OACX,kBAAC,EAAD,QCKYY,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnD,SAASoD,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.dc93ccc5.chunk.js","sourcesContent":["export default function mergeSortingSequence(arr) {\r\n    const seqArr = []; // Init sequence array\r\n    const auxArr = arr.slice(); // Auxiliary array\r\n\r\n    mergeSortHelper(arr, 0, arr.length - 1, auxArr, seqArr);\r\n\r\n    return seqArr;\r\n}\r\n\r\nfunction mergeSortHelper(arr, startIdx, endIdx, auxArr, seqArr) {\r\n    if (startIdx === endIdx) {\r\n        return;\r\n    }\r\n\r\n    const midIdx = Math.floor((startIdx + endIdx) / 2); // Middle index\r\n\r\n    mergeSortHelper(auxArr, startIdx, midIdx, arr, seqArr); // First half\r\n    mergeSortHelper(auxArr, midIdx + 1, endIdx, arr, seqArr); // Second half\r\n\r\n    merging(arr, startIdx, midIdx, endIdx, auxArr, seqArr);  // Actual merging\r\n}\r\n\r\nfunction merging(arr, startIdx, midIdx, endIdx, auxArr, seqArr) {\r\n    let leftIdx = startIdx; // Left sub array index\r\n    let rightIdx = midIdx + 1; // Right sub array index\r\n    let auxIdx = startIdx; // auxiliary index\r\n\r\n    while (leftIdx <= midIdx && rightIdx <= endIdx) {\r\n        // Push index of the compared elements\r\n        seqArr.push([leftIdx, rightIdx]);\r\n\r\n        // Merge\r\n        if (auxArr[leftIdx] <= auxArr[rightIdx]) {\r\n            seqArr.push([auxIdx, auxArr[leftIdx], true]);\r\n            arr[auxIdx++] = auxArr[leftIdx++];\r\n        } else {\r\n            seqArr.push([auxIdx, auxArr[rightIdx], true]);\r\n            arr[auxIdx++] = auxArr[rightIdx++];\r\n        }\r\n    }\r\n\r\n    while (leftIdx <= midIdx) { // Remaining elements of left sub array\r\n        seqArr.push([leftIdx, leftIdx]);\r\n        seqArr.push([auxIdx, auxArr[leftIdx], true]);\r\n\r\n        arr[auxIdx++] = auxArr[leftIdx++];\r\n    }\r\n    \r\n    while (rightIdx <= endIdx) { // Remaining elements of right sub array\r\n        seqArr.push([rightIdx, rightIdx]);\r\n        seqArr.push([auxIdx, auxArr[rightIdx], true]);\r\n\r\n        arr[auxIdx++] = auxArr[rightIdx++];\r\n    }\r\n\r\n    return;\r\n}","export default function heapSortingSequence(arr) {\r\n    const seqArr = []; // Init sequence array\r\n    let size = arr.length;\r\n\r\n    // Build heap from array \r\n    for (let i = Math.floor(size / 2) - 1; i >= 0; --i) {\r\n        heapify(arr, seqArr, size, i);\r\n    }\r\n\r\n    // One by one extract an element from heap\r\n    for (let i = size - 1; i > 0; --i) {\r\n        // Push index of the compared elements\r\n        seqArr.push([0, i, arr[i], arr[0]]);\r\n\r\n        // Swaping\r\n        let temp = arr[0];\r\n        arr[0] = arr[i];\r\n        arr[i] = temp;\r\n\r\n        // Heapify on reduced heap \r\n        heapify(arr, seqArr, i, 0);\r\n    }\r\n\r\n    return seqArr;\r\n}\r\n\r\nfunction heapify(arr, seqArr, size, idx) {\r\n    let largest = idx; // Initialize largest element as root\r\n    let left = 2 * idx + 1; // Left child node\r\n    let right = 2 * idx + 2; // Right child node\r\n\r\n    if (left < size) {\r\n        // Push index of the compared elements\r\n        seqArr.push([left, largest]);\r\n\r\n        // Update root\r\n        if (arr[left] > arr[largest]) {\r\n            largest = left;\r\n        }\r\n    }\r\n\r\n    if (right < size) {\r\n        // Push index of the compared elements\r\n        seqArr.push([right, largest]);\r\n\r\n        // Update root\r\n        if (arr[right] > arr[largest]) {\r\n            largest = right;\r\n        }\r\n    }\r\n\r\n    // If root isn't the largest element\r\n    if (largest !== idx) {\r\n        // Push index and value of swapped elements\r\n        seqArr.push([idx, largest, arr[largest], arr[idx]]);\r\n\r\n        // Swaping\r\n        let temp = arr[idx];\r\n        arr[idx] = arr[largest];\r\n        arr[largest] = temp;\r\n\r\n        // Recursively heapify the affected sub-tree \r\n        heapify(arr, seqArr, size, largest);\r\n    }\r\n}","const PRIMARY_COLOR = '#73f7dd';\r\nconst COMPARISON_COLOR = \"#e43f5a\";\r\nconst FINAL_COLOR = \"#e43f5a\";\r\n\r\n\r\nexport default class SortingAnimationFromSequence {\r\n    constructor(sortingSequence, sortingSpeedMs) {\r\n        this.timing = 0;\r\n\r\n        const arrayBars = document.getElementsByClassName('array-bar');\r\n        for (let i = 0; i < sortingSequence.length; i++) {\r\n            const [barOneIdx, barTwoIdx, barOneHeight, barTwoHeight] = sortingSequence[i];\r\n            const barOne = arrayBars[barOneIdx].style;\r\n            const barTwo = barOneHeight === undefined ? arrayBars[barTwoIdx].style : undefined;\r\n\r\n            if (barOneHeight === undefined) {\r\n                setTimeout(() => {\r\n                    barOne.backgroundColor = COMPARISON_COLOR;\r\n                    barTwo.backgroundColor = COMPARISON_COLOR;\r\n                }, sortingSpeedMs * this.timing++);\r\n                setTimeout(() => {\r\n                    barOne.backgroundColor = PRIMARY_COLOR;\r\n                    barTwo.backgroundColor = PRIMARY_COLOR;\r\n                }, sortingSpeedMs * this.timing++);\r\n            }\r\n            else {\r\n                setTimeout(() => {\r\n                    if (barOneHeight === true) {\r\n                        barOne.height = `${barTwoIdx}px`;\r\n                    }\r\n                    else {\r\n                        barOne.height = `${barOneHeight}px`;\r\n                        arrayBars[barTwoIdx].style.height = `${barTwoHeight}px`;\r\n                    }\r\n                }, sortingSpeedMs * this.timing++);\r\n            }\r\n        }\r\n\r\n        setTimeout(() => {\r\n            for (let i = 0; i < arrayBars.length; ++i) {\r\n                arrayBars[i].style.backgroundColor = FINAL_COLOR;\r\n            }\r\n        }, sortingSpeedMs * this.timing++);\r\n\r\n        return this.timing;\r\n    }\r\n}","import React from 'react';\r\nimport './SortingVisualizer.css';\r\nimport mergeSortingSequence from '../sortingAlgorithms/MergeSort.jsx';\r\nimport bubbleSortingSequence from '../sortingAlgorithms/BubbleSort.jsx';\r\nimport heapSortingSequence from '../sortingAlgorithms/HeapSort.jsx';\r\nimport SortingAnimationFromSequence from './SortingAnimationFromSequence.jsx';\r\nimport '../toolbar/Toolbar.css';\r\n\r\nconst NUM_OF_ELEMENTS = 125;\r\n\r\nexport default class SortingVisualizer extends React.Component {\r\n    constructor(properties) {\r\n        super(properties);\r\n\r\n        this.isSorting = false;\r\n\r\n        this.state = {\r\n            array: [],\r\n        };\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.initArr();\r\n    }\r\n\r\n    initArr() {\r\n        if (this.isSorting === false) {\r\n            const array = [];\r\n\r\n            for (let i = 0; i < NUM_OF_ELEMENTS; ++i) {\r\n                array.push(this.randomNumberInRange(50, 750));\r\n            }\r\n\r\n            this.setState({ array });\r\n        }\r\n\r\n    }\r\n\r\n    randomNumberInRange(minimum, maximum) {\r\n        return Math.floor(Math.random() * (maximum - minimum + 1)) + minimum;\r\n    }\r\n\r\n    mergeSort(ms) {\r\n        if (this.isSorting === false) {\r\n            this.isSorting = true;\r\n\r\n            const sortingSequence = mergeSortingSequence(this.state.array);\r\n            let s = new SortingAnimationFromSequence(sortingSequence, ms);\r\n\r\n            setTimeout(() => {\r\n                this.isSorting = false;\r\n            }, ms * s.timing);\r\n        }\r\n    }\r\n\r\n    bubbleSort(ms) {\r\n        if (this.isSorting === false) {\r\n            this.isSorting = true;\r\n\r\n            const sortingSequence = bubbleSortingSequence(this.state.array);\r\n            let s = new SortingAnimationFromSequence(sortingSequence, ms);\r\n\r\n            setTimeout(() => {\r\n                this.isSorting = false;\r\n            }, ms * s.timing);\r\n        }\r\n    }\r\n\r\n    heapSort(ms) {\r\n        if (this.isSorting === false) {\r\n            this.isSorting = true;\r\n\r\n            const sortingSequence = heapSortingSequence(this.state.array);\r\n            let s = new SortingAnimationFromSequence(sortingSequence, ms);\r\n\r\n            setTimeout(() => {\r\n                this.isSorting = false;\r\n            }, ms * s.timing);\r\n        }\r\n    }\r\n\r\n    render() {\r\n        const { array } = this.state;\r\n\r\n        return (\r\n            <div className=\"array-container\">\r\n                <haeader className=\"toolbar\">\r\n                    <nav className=\"toolbar__navigation\">\r\n                        <div></div>\r\n                        <div className=\"toolbar__logo\">\r\n                            Sorting Algorithms Visualizer\r\n                        </div>\r\n\r\n                        <div className=\"spacer\"></div>\r\n\r\n                        <div className=\"toolbar_navigation-items\">\r\n                            <ul>\r\n                                <li><a href=\"javascript:void(0);\" onClick={() => this.initArr()}>Randomize array</a></li>\r\n                                <li><a href=\"javascript:void(0);\" onClick={() => this.mergeSort(5)}>Merge Sort</a></li>\r\n                                <li><a href=\"javascript:void(0);\" onClick={() => this.bubbleSort(1)}>Bubble Sort</a></li>\r\n                                <li><a href=\"javascript:void(0);\" onClick={() => this.heapSort(5)}>Heap Sort</a></li>\r\n                            </ul>\r\n                        </div>\r\n                    </nav>\r\n                </haeader>\r\n\r\n                {\r\n                    array.map((value, idx) => (\r\n                        <div className=\"array-bar\" key={idx} style={{ height: `${value}px` }}>\r\n                            {'.'}\r\n                        </div>\r\n                    ))\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n}","export default function bubbleSortingSequence(arr) {\r\n    const sequenceArr = []; // Init sequence array\r\n\r\n    for (let j = 0; j < arr.length - 1; ++j) {\r\n        let swapped = false;\r\n\r\n        for (let i = 0; i < arr.length - 1 - j; ++i) {\r\n            sequenceArr.push([i, i + 1]); // Push index of the compared elements\r\n\r\n            if (arr[i] > arr[i + 1]) { // If current element is smaller than the next element\r\n                sequenceArr.push([i, i + 1, arr[i + 1], arr[i]]); // Push index and value of swapped elements\r\n                \r\n                let temp = arr[i]; // Swap\r\n                arr[i] = arr[i + 1];\r\n                arr[i + 1] = temp;\r\n\r\n                swapped = true;\r\n            }\r\n        }\r\n\r\n        if(swapped === false) { // Array is sorted\r\n            break;\r\n        }\r\n    }\r\n\r\n    return sequenceArr;\r\n}","import React from 'react';\nimport './App.css';\nimport SortingVisualizer from './sortingVisualizer/SortingVisualizer.jsx'\n\nfunction App() {\n  return (\n    <div className=\"App\">\n        <SortingVisualizer></SortingVisualizer>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}